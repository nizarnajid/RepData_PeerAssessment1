plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars,pch = 2)
data(mtcars)
?boxplot
args(boxplot)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?cat
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swir()
swirl()
exit()
quit()
library(swirl)
swirl()
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
args(group_by)
by_package <- group_by(cran, package)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs =0.99)
top_counts <- filter(pack_sum, pack_sum$count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =0.99)
top_unique <- filter(pack_sum, count>465)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
?gather
args(gather)
gather(students, sex, count, male, female)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"), "_")
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed" )
passed <- mutate(passed, status = "passed" )
failed <- mutate(passed, status = "failed" )
failed <- mutate(failed, status = "failed" )
bind_rows(passed, failed)
sat
?seperate
submit()
submit()
submit()
submit()
library(swirl)
swirl(s)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_data
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 16, minutes = 51
)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hous(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
args(with_tz)
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
args(interval)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
rm(list = ls())
?par
dev.cur()
?dev
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
rug(ppm, col = "green")
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm), lwd=4, col="magenta")
abline(v=median(ppm),  col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfro)
par(mfro)
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- which(pollution, pollution$region=="east")
east <- subset(pollution, pollution$region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(lattitude, pm25))
with(pollution, plot(latitude, pm25))
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1, 2), mar = c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
rm(list = ls())
library(swirl)
swirl()
head((airquality))
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col="red", pch=8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, pch=8, col="red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile(fileName = "plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLaebls.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip=FALSE, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch=20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors())
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols <- brewer.pal((3, "BuGn"))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal w- colorRampPalette(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth(method = "lm")
g+geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g+geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Siwrl Rules!")
g+geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title = "Swirl rules!")+labs(x="Displacement")+ labs(y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title = "Swirl rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title = "Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=4, linetype=3, method="lm")+geom_smooth(size=4, linetype=3, method = "lm", se=FALSE)
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line() + ylim(-3,3)
g+geom_line() + coord_cartesian(-3,3)
g+geom_line() + coord_cartesian(ylim=(-3,3))
g+geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
siwrl()
swrrl()
swirl()
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape= cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
NEI <- readRDS("summarySCC_PM25.rds")
setwd("~/")
rm(list = ls())
setwd("C:/Users/Nizar/Desktop/online courses/coursera data science/Course 5 reproducible research/week 2 project/git_repo/RepData_PeerAssessment1")
library(knitr)
knit2html("PA18template.Rmd")
knit2html("PA1_template.Rmd")
a <- read.csv(unzip("activity.zip"))
head(a)
str(a)
a$date <- as.Date(a$date)
str(a)
summary(a)
head(a)
tail(a)
activity_data <- read.csv(unzip("activity.zip"))
activity_data$date <- as.Date(activity_data$date)
head(activity_data)
library(data.table)
DT <- data.table(activity_data)
DT[, sum(steps), by = date]
DT[, sum(steps), by = date]
activity_per_day <- activity_DT[, sum(steps), by = date]
activity_DT <- data.table(activity_data)
activity_per_day <- activity_DT[, sum(steps), by = date]
head(activity_per_day)
names(activity_per_day)[2] <- "steps"
head(activity_per_day)
?hist
hist(activity_per_day$steps)
library(ggplot2)
ggplot(activity_per_day, aes(x=steps)) + geom_histogram()
ggplot(activity_per_day, aes(x=steps)) + geom_histogram(binwidth=1)
ggplot(activity_per_day, aes(x=steps)) + geom_histogram()
mean_activity_per_day <- activity_DT[, mean(steps), by = date]
head(mean_activity_per_day)
names(mean_activity_per_day)[2] <- "mean"
# Calculating and reporting the mean and median total number of steps taken per day
```r
mean_activity_per_day <- activity_DT[, mean(steps), by = date]
names(mean_activity_per_day)[2] <- "mean"
?barplot
barplot(mean_activity_per_day)
barplot(mean_activity_per_day$mean)
barplot(mean_activity_per_day$mean, mean_activity_per_day$date)
ggplot(data=mean_activity_per_day, aes(x=date, y=steps)) + geom_bar(stat="identity")
ggplot(data=mean_activity_per_day, aes(x=date, y=mean)) + geom_bar(stat="identity")
median_activity_per_day <- activity_DT[, median(steps), by = date]
names(median_activity_per_day)[2] <- "median"
ggplot(data=median_activity_per_day, aes(x=date, y=median)) + geom_bar(stat="identity")
head(median_activity_per_day)
str(median_activity_per_day)
summary(median_activity_per_day)
head(activity_DT)
summary(activity_DT)
summary(activity_data)
head(activity_data)
head(activity_data, n = 100)
head(activity_data, n = 1000)
average_per_interval <- activity_DT[, sum(steps), by = interval]
head(average_per_interval)
summary(average_per_interval)
head(average_per_interval, n=100)
average_per_interval <- activity_DT[, mean(steps), by = interval]
head(average_per_interval, n=100)
summary(average_per_interval)
head(activity_DT)
summary(activity_DT)
summary(average_per_interval)
stre(average_per_interval)
str(average_per_interval)
summary(average_per_interval)
head(activity_DT)
str(activity_DT)
activity_DT$interval <- as.factor(activity_DT$interval)
average_per_interval <- activity_DT[, mean(steps), by = interval]
head(average_per_interval)
summary(average_per_interval)
average_per_interval <- activity_DT[, mean(steps, na.rm = true), by = interval]
average_per_interval <- activity_DT[, mean(steps, na.rm = TRUE), by = interval]
head(average_per_interval)
summary(average_per_interval)
names(average_per_interval)[2] <- "average_steps"
summary(average_per_interval)
ggplot(average_per_interval, aes(x = interval, y = average_steps))
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_line()
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_point()
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_abline()
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_hline()
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_line()
head(average_per_interval)
summary(average_per_interval)
ggplot(average_per_interval, aes(x = interval, y = average_steps)) + geom_point()
plot(average_per_interval$interval, average_per_interval$average_steps, type = "l")
average_per_interval[ max(average_steps), "interval"]
max(average_per_interval$average_steps)
average_per_interval[ (average_per_interval$average_steps == max(average_steps)), "interval"]
test <- average_per_interval[ (average_per_interval$average_steps == max(average_steps)), "interval"]
print(test)
sum(is.na(activity_data$steps))
summary(activity_data)
head(activity_data)
head(average_per_interval)
activity_data[is.na(activity_data$steps), "steps"] <- average_per_interval[(average_per_interval$interval == activity_data$interval), "average_steps"]
head(activity_data)
df <- merge(x=activity_data, y=average_per_interval, by="interval")
head(df)
summary(df)
head(df)
activity_data_with_average <- merge(x=activity_data, y=average_per_interval, by="interval")
activity_data_only_na <- activity_data_with_average[(is.na(activity_data_with_average$steps)), ]
head(activity_data_only_na)
activity_data_with_average[(is.na(activity_data_with_average$steps)), "steps"] <- activity_data_with_average$average_steps
activity_data_with_average[(is.na(activity_data_with_average$steps)), "steps"] <- activity_data_with_average[, "average_steps"]
activity_data_with_average$steps <- if(is.na(activity_data_with_average$steps), activity_data_with_average$average_steps)
activity_data_with_average$steps <- if(is.na(activity_data_with_average$steps) {activity_data_with_average$average_steps}
activity_data_with_average$steps <- if(is.na(activity_data_with_average$steps) activity_data_with_average$average_steps
for(i in 1:nrow(activity_data_with_average){
if(is.na(activity_data_with_average[i, "steps"]) activity_data_with_average[i, "steps"] <- activity_data_with_average[i, "average_steps"]
for(i in 1:nrow(activity_data_with_average){
if(is.na(activity_data_with_average[i, steps]) activity_data_with_average[i, "steps"] <- activity_data_with_average[i, "average_steps"]
for(i in 1:nrow(activity_data_with_average){
if(is.na(activity_data_with_average[i, steps]) activity_data_with_average[i, steps] <- activity_data_with_average[i, "average_steps"]
for(i in 1:nrow(activity_data_with_average){
if(is.na(activity_data_with_average[i, steps]) activity_data_with_average[i, steps] <- activity_data_with_average[i, average_steps]
for(i in 1:nrow(activity_data_with_average){
if(is.na(activity_data_with_average[i, steps]) activity_data_with_average[i, steps] <- activity_data_with_average[i, average_steps]
}
for(i in 1:nrow(activity_data_with_average)){
if(is.na(activity_data_with_average[i, steps]) activity_data_with_average[i, steps] <- activity_data_with_average[i, average_steps]
}
for(i in 1:nrow(activity_data_with_average)){
if(is.na(activity_data_with_average[i, steps])) activity_data_with_average[i, steps] <- activity_data_with_average[i, average_steps]
}
for(i in 1:nrow(activity_data_with_average)){
if(is.na(activity_data_with_average[i, "steps"])) activity_data_with_average[i, "steps"] <- activity_data_with_average[i, "average_steps"]
}
head(activity_data_with_average)
summary(activity_data_with_average)
data_without_nas <- activity_data_with_average[, c("steps", "date", "interval")]
